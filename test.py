import taichi as ti
import numpy as np

ti.init(arch=ti.cuda)

# arr = ti.field(ti.f32, shape = (3,3,3))

# arr.fill(1)



# @ti.kernel
# def func():
#     for i in ti.grouped(arr):
#         print(index(i))

# func()

# idx = index([1,1,1])
# print(type(index(-idx)))

# @ti.kernel
# def func(a:index)->ti.i32:
#     res = 0
#     if a.x == 1 and a.y == 1 and a.z == 1:
#         res = 1
#     elif a.x == 2 and a.y == 2 and a.z == 2:
#         res = 2
#     else:
#         res = 3
#     return res

# idx = index([2,2,2])
# print(func(idx))

# mt = ti.Matrix.field(2,2,ti.f32,shape = 3)

# arr = np.array([[[1,2],[3,4]],[[5,6],[7,8]],[[9,10],[11,12]]])

# mt.from_numpy(arr)

# nda = ti.ndarray(dtype=ti.int32,shape=(3,2,2))
# nda.from_numpy(arr)

# @ti.kernel
# def func(nda : ti.types.ndarray(ti.i32, 3)):
#     for i in range(nda.shape[0]):
        
# @ti.kernel
# def func(a : ti.types.ndarray()):
#     for i in ti.grouped(a):
#         print(i)

# arr = ti.ndarray(ti.f64,shape=3)
# arr.fill(1)
# func(arr)

# x =  index([1,2,3])
# y = index([4,5,6])
# arr = ti.ndarray(dtype=index,shape=2)
# arr = [x,y]

# print(arr[1])

# @ti.func
# def 

# @ti.kernel
# def func():



# id1 = index(1,2,3,4,5,6)
# print(id1[0])
# # print(id1[4])
# # print(id1[0,0,0])

# idxs = ti.types.matrix(2,3, dtype=ti.i64)

# arr = idxs(index(1,2,3),index(4,5,6))

# x,y,z = arr[0,:]

# print(x,y,z)


# arr1 = ti.ndarray(ti.i32,shape=(2,2))
# arr1.fill(1)

# arr2 = ti.ndarray(ti.i32,shape=2)
# arr2.fill(2)

# @ti.kernel
# def func(arr1 : ti.types.ndarray(), arr2 : ti.types.ndarray()):
#     arr1 = [[2,2],[2,2]]
#     print(arr1[0,0])

# func(arr1,arr2)

# v = vec24f64(0)

# print(v)


# arr = vec3f64(1,2,3)

# arr += vec3f64(1,1,1)

# # ndarr = ti.ndarray(ti.f64, shape=3)

# # @ti.kernel
# # def func(ndarr : ti.types.ndarray()):
# #     ndarr.copy_from(arr)

# # func(ndarr)

# arr2 = np.array(arr)

# print(arr2)



# arr1 = ti.ndarray(ti.f64, shape=(1,1,1))
# arr2 = ti.ndarray(ti.i64, shape=(1,1,1))

# arr1.fill(2)
# arr2.fill(1)

# arr2 = arr1

# arr2.copy_from(arr1)

# @ti.kernel
# def func(arr : ti.types.ndarray()):
#     for idx in ti.grouped(arr):
#         print(arr[idx])

# func(arr2)

# @ti.func
# def func2()->ti.types.ndarray():
#     arr =ti.ndarray(ti.i16,shape=1)
#     arr.fill(1)
#     return arr

# @ti.kernel
# def func1():
#     tmp = func2()
# func1()


# arr = ti.ndarray(ti.f32,shape=(3,3))
# nparr = np.array([[1,2,3],[4,5,6],[7,8,9]])

# arr.from_numpy(nparr)

# @ti.kernel
# def func(arr : ti.types.ndarray()):
#     m = ti.Matrix([[arr[0,0],arr[0,1],arr[0,2]],[arr[1,0],arr[1,1],arr[1,2]],[arr[2,0],arr[2,1],arr[2,2]]],ti.f32)
    

# func(arr)


# @ti.kernel
# def func():
#     m = ti.Matrix([[1,2,3],[4,5,6]])
#     m2=m.transpose()
#     print(m2)

# func()

# arr1 = ti.ndarray(ti.f32,shape=(2,2))
# arr2 = ti.ndarray(ti.f32,shape=(2,2))

# arr1.fill(1)
# arr2.fill(2)



# @ti.kernel
# def func(arr1 : ti.types.ndarray(), arr2 : ti.types.ndarray()):
#     arr1.copy_from(arr2)
#     for idx in ti.grouped(arr1):
#         print(arr1[idx])

# func(arr1,arr2)


# from indexUtilities import *

# ti.init(ti.cuda)

# @ti.kernel
# def func()->ti.types.matrix(n=24,m=3,dtype=ti.i64):
#     m = ti.Matrix([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
#     nod, dof = NodeIndicesToDofIndices(m)
#     return nod
# m = func()

# print(m)


##################  projectToFiner  #####################
# from projection import *

# nparr = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]])

# arr = ti.ndarray(ti.f64,shape=(5,5,5,3))
# tmp = ti.ndarray(ti.f64,shape=(3,3,3,3))
# tmp.from_numpy(nparr)

# @ti.kernel
# def init(arr : ti.types.ndarray(), tmp : ti.types.ndarray()):
#    for id in ti.grouped(tmp):
#        arr[id] = tmp[id]

# @ti.kernel
# def func(arr : ti.types.ndarray()):
#     boundaries = ti.Vector([3,3,3])
#     boundaries = projectToFiner(arr, boundaries)
#     print(boundaries)
#     # for id in ti.grouped(arr):
#     #     print(arr[id])

# init(arr,tmp)

# func(arr)

# nparr = arr.to_numpy()

# print(nparr)

# res = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.375000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.500000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.375000]],[[0.000000,0.000000,-0.187500],[0.000000,0.000000,-0.218750],[0.000000,0.000000,-0.250000],[0.000000,0.000000,-0.218750],[0.000000,0.000000,-0.187500]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-0.875000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.875000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,-0.375000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.500000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.375000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-0.875000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.875000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,-0.375000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.500000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.375000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-0.875000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.875000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,-0.375000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.500000],[0.000000,0.000000,-0.437500],[0.000000,0.000000,-0.375000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]]
# )

# res2 = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[0.000000, 0.000000, -0.375000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.500000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.375000]], [[0.000000, 0.000000, -0.187500], [0.000000, 0.000000, -0.218750], [0.000000, 0.000000, -0.250000], [0.000000, 0.000000, -0.218750], [0.000000, 0.000000, -0.187500]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[0.000000, 0.000000, -0.750000], [0.000000, 0.000000, -0.875000], [0.000000, 0.000000, -1.000000], [0.000000, 0.000000, -0.875000], [0.000000, 0.000000, -0.750000]], [[0.000000, 0.000000, -0.375000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.500000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.375000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[0.000000, 0.000000, -0.750000], [0.000000, 0.000000, -0.875000], [0.000000, 0.000000, -1.000000], [0.000000, 0.000000, -0.875000], [0.000000, 0.000000, -0.750000]], [[0.000000, 0.000000, -0.375000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.500000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.375000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[0.000000, 0.000000, -0.750000], [0.000000, 0.000000, -0.875000], [0.000000, 0.000000, -1.000000], [0.000000, 0.000000, -0.875000], [0.000000, 0.000000, -0.750000]], [[0.000000, 0.000000, -0.375000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.500000], [0.000000, 0.000000, -0.437500], [0.000000, 0.000000, -0.375000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
# print("-----------------------------------------------------------")

# print(res.shape)

# flag = True 

# for i, v in np.ndenumerate(res2):
#     if res2[i] != res[i]:
#         flag = False

# print(flag)





##################  projectToCoarser  #####################
# from projection import *

# nparr = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-1.000000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-1.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]]
# )

# # print(nparr.shape)

# arr = ti.ndarray(ti.f64,shape=(5,5,5,3))
# arr.from_numpy(nparr)

# tmp = ti.ndarray(ti.f64,shape=(3,3,3,3))

# @ti.kernel
# def func(arr : ti.types.ndarray(), tmp : ti.types.ndarray()):
#     boundaries = ti.Vector([5,5,5])
#     boundaries = projectToCoarser(arr, boundaries)
#     # print(boundaries)
#     # for id in ti.grouped(arr):
#     #     print(arr[id])
#     for id in ti.grouped(tmp):
#         tmp[id] = arr[id]

# func(arr, tmp)
# # print("-----------------------------------------------------------")
# nparr = tmp.to_numpy()

# print(nparr)

# res = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,-0.750000],[0.000000,0.000000,-1.000000],[0.000000,0.000000,-0.750000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]]
# )

# print("-----------------------------------------------------------")

# print(res)

# flag = True 

# for i, v in np.ndenumerate(nparr):
#     if nparr[i] != res[i]:
#         flag = False

# print(flag)




##################  applyStiffnessMatrix  #####################
# from applyStiffnessMatrix import *

# npx = np.array([[[0.500000,0.500000],[0.500000,0.500000]],[[0.500000,0.500000],[0.500000,0.500000]]])
# npu = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,100.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]])
# # print(npu.shape)

# x = ti.ndarray(ti.f32,shape=(2,2,2))
# x.from_numpy(npx)

# u = ti.ndarray(ti.f64,shape=(3,3,3,3))
# u.from_numpy(npu)

# res = ti.ndarray(ti.f64,shape=(3,3,3,3))

# @ti.kernel
# def func(x : ti.types.ndarray(), u : ti.types.ndarray(),res : ti.types.ndarray()):
#     applyStiffnessMatrix(x,u,res)

# func(x, u, res)
# print("-----------------------------------------------------------")
# npu = res.to_numpy()

# print(npu)

# res = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[-0.200322, 0.667740, -0.500805], [-0.100161, -0.066774, 0.100161], [0.000000, 0.000000, 0.000000]], [[-1.001610, -1.068384, -0.100161], [-0.500805, -0.734514, 0.500805], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[1.001610, 2.938055, -1.001610], [0.500805, 0.667740, 0.200322], [0.000000, 0.000000, 0.000000]], [[0.200322, -1.335479, -0.200322], [0.100161, -1.068384, 1.001610], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
# res2 = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[-0.200322, 0.667740, -0.500805], [-0.100161, -0.066774, 0.100161], [0.000000, 0.000000, 0.000000]], [[-1.001610, -1.068384, -0.100161], [-0.500805, -0.734514, 0.500805], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[1.001610, 2.938055, -1.001610], [0.500805, 0.667740, 0.200322], [0.000000, 0.000000, 0.000000]], [[0.200322, -1.335479, -0.200322], [0.100161, -1.068384, 1.001610], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
# print("-----------------------------------------------------------")

# print(res)

# print("-----------------------------------------------------------")

# print(res2)
# flag = True 

# for i, v in np.ndenumerate(npu):
#     print(str(npu[i])+" ------- "+str(res[i])+" ------- "+str(abs(npu[i]-res[i])))
#     if abs(npu[i] - res[i]) > 0.000001:
#         flag = False

# print(flag)



##################  applyCoarseStiffnessMatrix  #####################
# from applyStiffnessMatrix import *

# npx = np.array([[[0.500000,0.500000],[0.500000,0.500000]],[[0.500000,0.500000],[0.500000,0.500000]]])
# npu = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,100.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]])
# # print(npu.shape)

# x = ti.ndarray(ti.f32,shape=(2,2,2))
# x.from_numpy(npx)

# tmp = ti.ndarray(ti.f64,shape=(3,3,3,3))
# tmp.from_numpy(npu)

# u = ti.ndarray(ti.f64,shape=(5,5,5,3))
# u.fill(-1)

# bd = index([3,3,3])

# @ti.kernel
# def initData(u : ti.types.ndarray(), tmp : ti.types.ndarray()):
#     for i,j,k in ti.ndrange(bd[0],bd[1],bd[2]):
#         u[i,j,k,0] = tmp[i,j,k,0] 
#         u[i,j,k,1] = tmp[i,j,k,1] 
#         u[i,j,k,2] = tmp[i,j,k,2] 

# initData(u, tmp)

# res = ti.ndarray(ti.f64,shape=(3,3,3,3))

# @ti.kernel
# def func(x : ti.types.ndarray(), u : ti.types.ndarray(),res : ti.types.ndarray()):
#     bd = index([3,3,3])
#     applyCoarseStiffnessMatrix(1,x,u,bd,res)

# func(x, u, res)
# print("-----------------------------------------------------------")
# npu = res.to_numpy()

# print(npu)

# res = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[-0.200322, 0.667740, -0.500805], [-0.100161, -0.066774, 0.100161], [0.000000, 0.000000, 0.000000]], [[-1.001610, -1.068384, -0.100161], [-0.500805, -0.734514, 0.500805], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[1.001610, 2.938055, -1.001610], [0.500805, 0.667740, 0.200322], [0.000000, 0.000000, 0.000000]], [[0.200322, -1.335479, -0.200322], [0.100161, -1.068384, 1.001610], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
# res2 = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[-0.200322, 0.667740, -0.500805], [-0.100161, -0.066774, 0.100161], [0.000000, 0.000000, 0.000000]], [[-1.001610, -1.068384, -0.100161], [-0.500805, -0.734514, 0.500805], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[1.001610, 2.938055, -1.001610], [0.500805, 0.667740, 0.200322], [0.000000, 0.000000, 0.000000]], [[0.200322, -1.335479, -0.200322], [0.100161, -1.068384, 1.001610], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
# print("-----------------------------------------------------------")

# print(res)

# print("-----------------------------------------------------------")

# print(res2)
# flag = True 

# for i, v in np.ndenumerate(npu):
#     print(str(npu[i])+" ------- "+str(res[i])+" ------- "+str(abs(npu[i]-res[i])))
#     if abs(npu[i] - res[i]) > 0.000001:
#         flag = False

# print(flag)



##################  sorMatrixFree  #####################
from sor import *

npx = np.array([[[0.500000,0.500000],[0.500000,0.500000]],[[0.500000,0.500000],[0.500000,0.500000]]])
npf = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,100.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]])
npu = np.array([[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]],[[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]],[[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.000000,0.000000,0.000000]]]])
# print(npu.shape)

x = ti.ndarray(ti.f32,shape=(2,2,2))
x.from_numpy(npx)

f = ti.ndarray(ti.f64,shape=(3,3,3,3))
f.from_numpy(npf)

u = ti.ndarray(ti.f64,shape=(3,3,3,3))
u.from_numpy(npu)

uhalf = ti.ndarray(ti.f64,shape=(3,3,3,3))
uhalf.fill(0)


@ti.kernel
def func(x:nd3f32, f:nd4f32, u:nd4f32, uhalf:nd4f32):
    sorMatrixFree(x,f,u,uhalf)

func(x,f,u,uhalf)
print("-----------------------------------------------------------")

npu = u.to_numpy()

print(npu)

res = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[27.531286, -84.219269, 56.961281], [-25.157902, 10.522015, 27.531288], [0.000000, 0.000000, 0.000000]], [[100.868942, 107.830872, 12.816289], [17.207054, 29.390440, -13.053627], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[-602.336792, 3001.437744, 696.193481], [-47.575615, -124.998367, 53.163868], [0.000000, 0.000000, 0.000000]], [[-8.112667, 264.237061, -5.696130], [-6.882822, 75.790154, -66.454826], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
# res2 = np.array([[[[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[-0.200322, 0.667740, -0.500805], [-0.100161, -0.066774, 0.100161], [0.000000, 0.000000, 0.000000]], [[-1.001610, -1.068384, -0.100161], [-0.500805, -0.734514, 0.500805], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]], [[[1.001610, 2.938055, -1.001610], [0.500805, 0.667740, 0.200322], [0.000000, 0.000000, 0.000000]], [[0.200322, -1.335479, -0.200322], [0.100161, -1.068384, 1.001610], [0.000000, 0.000000, 0.000000]], [[0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000]]]])
print("-----------------------------------------------------------")

print(res)

print("-----------------------------------------------------------")

print(res)
flag = True 

for i, v in np.ndenumerate(npu):
    print(str(npu[i])+" ------- "+str(res[i])+" ------- "+str(abs(npu[i]-res[i])))
    if abs(npu[i] - res[i]) > 0.000001:
        flag = False

print(flag)